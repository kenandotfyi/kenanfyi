---
import { getCollection } from "astro:content";
import Base from "../layouts/Base.astro";
import { datum, zeit } from "../../utils/zeit.ts";

// GET ALL ARTICLES FROM articles COLLECTION
const allArticles = await getCollection("articles", ({ data }: { data: any }) => {
  return data.draft !== true;
});
allArticles.sort((a: any, b: any) => b.data.pubDate - a.data.pubDate);

// GET ALL NOTES FROM notes COLLECTION
const allNotes = await getCollection("notes", ({ data }: { data: any }) => {
  return data.draft !== true;
});
allNotes.sort((a: any, b: any) => b.data.pubDate - a.data.pubDate);
const pageTitle = "kenan.fyi | posting occasionally";
---

<Base pageTitle={pageTitle}>
  <section>
    <p id="type"></p>
    <p>This is my playground where I try new stuff out and keep learning about web technologies plus posting some thoughts occasionally.</p>
    <p>
      There are some metadata inside the posts, which gives the reader some ideas about the articles. Like the status which shows if the article is completed or not. Also the update date. I will
      implement a more friendly metadata display in the future. Since I am building in public, I do my updates in the prod.
    </p>
    <p>✶</p>
    <p><i>Recent Articles</i></p>
    <ul class="index-list">
      {
        allArticles.map((article: any) => (
          <li class="index-list-element">
            <a href={`/articles/${article.slug}/`} class="no-prev">
              {article.data.title}
            </a>
            <span class="date">{"   " + datum(article.data.pubDate)}</span>
            {datum(article.data.updated) === datum(article.data.pubDate) ? "" : <span class="element-updated-text">{"/" + datum(article.data.updated)}</span>}
          </li>
        ))
      }
    </ul>
    <p>✶</p>
    <p><i>Lates Notes</i></p>
    <ul class="index-list">
      {
        allNotes.map((note: any) => (
          <li class="index-list-element">
            <span>
              <a href={`/notes/${note.slug}/`} class="no-prev">
                {note.data.title}
              </a>
            </span>
            <span class="date">, {datum(note.data.pubDate)}</span>
            {datum(note.data.updated) === datum(note.data.pubDate) ? "" : <span class="element-updated-text">{"(updated: " + zeit(note.data.updated) + ")"}</span>}
          </li>
        ))
      }
    </ul>
  </section>
</Base>
<script>
  import TypeIt from "typeit";

  new TypeIt("#type", {
    strings: "Hey! Kenan here.",
    speed: 75,
    loop: false,
  }).go();

  console.log("type");
</script>
