---
import "../styles/fonts.css";
import "../styles/colors.css";
import "../styles/global.css";
import BasePage from "../layouts/BasePage.astro";
import { mmYY } from "../../utils/zeit.ts";
import { Icon } from "astro-icon/components";

const Hardcover = import.meta.env.Hardcover;

var bearer = "Bearer " + Hardcover;

const query = `
{
  me {
    user_books(order_by: {status_id: asc}) {
      rating
      review_raw
      status_id
      book {
        id
        title
        slug
        pages
        release_year
        cached_contributors
        image {
          url
          height
          width
        }
      }
    }
  }
}`;

interface BookItem{
  rating: number,
  review_raw: string,
  status_id: number,
  book: {
    id: number,
    title: string,
    slug: string,
    pages: number,
    release_year: number,
    cached_contributors: {author: { name: string }}[],
    image: {
      url: string,
      height: number,
      width: number
    }
  }
}

const statusLabels: Record<BookItem["status_id"], string> = {
  1: "Want to read",
  2: "Reading",
  3: "Read",
  5: "Did not finish",
}

const ratingStars: Record<BookItem["rating"], string> = {
  1: "∗",
  2: "∗∗",
  3: "∗∗∗",
  4: "∗∗∗∗",
  5: "∗∗∗∗∗",
}


const response = await fetch("https://api.hardcover.app/v1/graphql", {
  method: "POST",
  headers: {
    Authorization: bearer,
    "Content-Type": "application/json",
  },
  body: JSON.stringify({ query }),
});

const d = await response.json();
const books = d.data.me[0];

const pageTitle = "library";
---

<BasePage pageTitle={pageTitle}>
  <section>
    <h1 class="pageHeader">{pageTitle}</h1>
    <Icon name="ph:warning-duotone" size="32" /><br />
    <i>under construction</i>
    <p>
      Library works at the moment, but I need to implement some better review process/display.
    </p>
    <table id="data-table" class="index-table">
      <thead>
        <tr class="index-header">
          <td>Status</td>
          <td>Title</td>
          <td>Author</td>
          <td>Rating</td>
        </tr>
      </thead>
      <tbody>
        {
        books.user_books.map((item: BookItem) =>  (    
        <tr class="clickable" data-details={`details-row-${item.book.id}`}>
          <td class="index-date">{statusLabels[item.status_id]}</td>
          <td>{item.book.title}</td>
          <td>{item.book.cached_contributors[0].author.name}</td>
          <td class="index-read">{ratingStars[item.rating]}</td>
        </tr>
        <tr id={`details-row-${item.book.id}`} class="hidden-row">
          <td colspan="4" class="">{item.review_raw}</td>
        </tr>
        ))
        }
    </tbody>

    </table>
    <script is:inline>
      document.addEventListener("DOMContentLoaded", () => {
        const clickableRows = document.querySelectorAll(".clickable");

        clickableRows.forEach((row) => {
          row.addEventListener("click", () => {
            const targetRowId = row.getAttribute("data-details");
            const targetRow = document.getElementById(targetRowId);

            // hide all detail rows except the clicked one
            document.querySelectorAll(".hidden-row").forEach((r) => {
              if (r !== targetRow) r.style.display = "none";
            });

            //  avoid the double-click issue
            const isHidden = getComputedStyle(targetRow).display === "none";
            targetRow.style.display = isHidden ? "table-row" : "none";
          });
        });
      });
    </script>
  </section>
</BasePage>


<style>
.index-table {
    border-bottom: 0px;
    border-right: 1px solid var(--border);
    border-left: 1px solid var(--border);
    border-spacing: 0;
    border-collapse: collapse;
    font-size: 16px;

    & .index-header {
      background-color: var(--table-bg);
      border-top: 1px solid var(--border);
      border-bottom: 1px solid var(--border);

      & a {
        text-decoration: none;
      }
    }

    & td {
      font-family: Atkinson;
      text-align: left;
      border-bottom: 1px solid var(--border);
      padding: 4px;
      text-align: left;
      vertical-align: top;
  }

    & td.article-excerpt{
      font-size: 14px;
      color: var(--metadata);
    }

    & td.index-date {
      width: 100px;
    }

    & td.index-read {
      width: 86px;
      font-family: Atkinson;
      text-align: center;

      & a {
        background-color: black;
        color: white;
        padding: 0 0.75rem;
        text-decoration: none;
      }

      & a:hover,
      a:visited:hover {
        background-color: var(--red);
      }

      & a:visited {
        background-color: var(--metadata);
      }
    }
  }

  @media (max-width: 1124px) {
    .index-table {
      width: 98%;

      & td.index-date {
        width: 80px;
        font-size: 12px;
      }
    }
  }
</style>



