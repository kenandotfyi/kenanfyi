---
import "../styles/fonts.css";
import "../styles/colors.css";
import "../styles/global.css";
import BasePage from "../layouts/BasePage.astro";
import { mmYY } from "../../utils/zeit.ts";
import { Icon } from "astro-icon/components";

const LITERAL = import.meta.env.Literal;

var bearer = "Bearer " + LITERAL;

const BOOKS_QUERY = `
  fragment BookParts on Book {
    id
    slug
    title
    subtitle
    description
    isbn10
    isbn13
    language
    pageCount
    publishedDate
    publisher
    cover
    authors {
      id
      name
    }
    gradientColors
  }

  fragment ReadingStateParts on ReadingState {
    id
    status
    bookId
    profileId
    createdAt
  }

  query myReadingStates {
    myReadingStates {
      ...ReadingStateParts   # find fragments below
      book {
        ...BookParts   # find fragments below
      }
    }
  }

`;

let profileId = "cm6b8ukdr1205880h00hlb44f3b";

const response = await fetch("https://literal.club/graphql/", {
  method: "POST",
  headers: {
    Authorization: bearer,
    "Content-Type": "application/json",
  },
  body: JSON.stringify({ query: BOOKS_QUERY }),
});

const d = await response.json();

interface BookItem {
  status: string;
  createdAt: string;
  book: {
    title: string;
    authors: { name: string }[];
    cover: string;
    description: string;
    publishedDate: string;
    isbn13: string;
  };
}

const statusLabels: Record<BookItem["status"], string> = {
  IS_READING: "Reading",
  FINISHED: "Finished",
  WANTS_TO_READ: "Wanna read",
};

const books = d.data.myReadingStates;

// books.sort((a: any, b: any) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());

const pageTitle = "library";
---

<BasePage pageTitle={pageTitle}>
  <section>
    <h1>{pageTitle}</h1>
    <Icon name="ph:warning-duotone" size="32" /><br />
    <i>under construction</i>
    <p>
      Library currently just returns the default description and the status where I am pulling the API from. Therefore there is currenyly no rating information. I'm working on implementing a rating
      algorithm, so that it is automatically pulled from the service I use which is <a href="https://literal.club/pages/api">LiteralÂ°</a>.
    </p>
    <table id="data-table" class="index-table">
      <thead>
        <tr class="index-header">
          <td>Status</td>
          <td>Title</td>
          <td>Publish Date</td>
        </tr>
      </thead>
      <tbody>
        {books.map((b: BookItem) => (
            <tr class="clickable" data-details={`details-row-${b.book.isbn13}`}>
              <td class="index-date">{statusLabels[b.status]}</td>
              <td>{b.book.title}</td>
              <td class="index-read">{mmYY(b.book.publishedDate)}</td>
            </tr>
            <tr id={`details-row-${b.book.isbn13}`} class="hidden-row">
              <td><img src=`${b.book.cover}` alt=`${b.book.title}`></td>
              <td colspan="2" class="article-excerpt">{b.book.description}...</td>
            </tr>
        ))}
      </tbody>
    </table>

    <script is:inline>
    document.addEventListener("DOMContentLoaded", () => {
        const clickableRows = document.querySelectorAll(".clickable");

        clickableRows.forEach(row => {
            row.addEventListener("click", () => {
                const targetRowId = row.getAttribute("data-details");
                const targetRow = document.getElementById(targetRowId);

                // Hide all detail rows except the clicked one
                document.querySelectorAll(".hidden-row").forEach(r => {
                    if (r !== targetRow) r.style.display = "none";
                });

                // Toggle clicked row using computed style to avoid the double-click issue
                const isHidden = getComputedStyle(targetRow).display === "none";
                targetRow.style.display = isHidden ? "table-row" : "none";
            });
        });
    });
    </script>
  </section>
</BasePage>
